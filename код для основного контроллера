#include <stdio.h>
#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_system.h"
#include "esp_wifi.h"
#include "esp_event.h"
#include "esp_log.h"
#include "nvs_flash.h"
#include "driver/gpio.h"
#include "esp_mqtt.h"
#include "dht22.h"
#include "wifi_connect.h"

#define TAG "TEMP_CONTROLLER"
#define MQTT_URI "mqtt://iot.eclipse.org:1883"
#define MQTT_TOPIC_SETPOINT "temp_control/P279/setpoint"
#define MQTT_TOPIC_CURRENT "temp_control/P279/current"
#define MQTT_TOPIC_STATE "temp_control/P279/state"

#define HEATER_PIN GPIO_NUM_23
#define COOLER_PIN GPIO_NUM_22
#define DHT_PIN GPIO_NUM_21

static esp_mqtt_client_handle_t mqtt_client;
static float target_temp = 22.0;
static bool system_enabled = true;

static void mqtt_event_handler(void *args, esp_event_base_t base, 
                               int32_t event_id, void *event_data) {
    esp_mqtt_event_handle_t event = event_data;
    
    if (event->event_id == MQTT_EVENT_DATA && 
        strncmp(event->topic, MQTT_TOPIC_SETPOINT, event->topic_len) == 0) {
        
        char buffer[10];
        strncpy(buffer, event->data, event->data_len);
        buffer[event->data_len] = '\0';
        target_temp = atof(buffer);
        ESP_LOGI(TAG, "New target: %.1fÂ°C", target_temp);
    }
}

static void relay_init(gpio_num_t pin) {
    gpio_reset_pin(pin);
    gpio_set_direction(pin, GPIO_MODE_OUTPUT);
    gpio_set_level(pin, 0);
}

static void temp_control_task(void *pvParams) {
    dht22_config_t dht_config = {
        .gpio_pin = DHT_PIN,
        .update_interval_ms = 5000
    };
    dht22_init(&dht_config);

    while(1) {
        float temp, humid;
        if (dht22_read(&dht_config, &temp, &humid) == ESP_OK) {
            char temp_str[10];
            snprintf(temp_str, sizeof(temp_str), "%.1f", temp);
            esp_mqtt_client_publish(mqtt_client, MQTT_TOPIC_CURRENT, temp_str, 0, 1, 0);

            if (system_enabled) {
                if (temp < target_temp - 0.5) {
                    gpio_set_level(HEATER_PIN, 1);
                    gpio_set_level(COOLER_PIN, 0);
                    esp_mqtt_client_publish(mqtt_client, MQTT_TOPIC_STATE, "heating", 0, 1, 0);
                } 
                else if (temp > target_temp + 0.5) {
                    gpio_set_level(HEATER_PIN, 0);
                    gpio_set_level(COOLER_PIN, 1);
                    esp_mqtt_client_publish(mqtt_client, MQTT_TOPIC_STATE, "cooling", 0, 1, 0);
                }
                else {
                    gpio_set_level(HEATER_PIN, 0);
                    gpio_set_level(COOLER_PIN, 0);
                    esp_mqtt_client_publish(mqtt_client, MQTT_TOPIC_STATE, "idle", 0, 1, 0);
                }
            }
        }
        vTaskDelay(pdMS_TO_TICKS(5000));
    }
}

void app_main() {
    ESP_ERROR_CHECK(nvs_flash_init());
    wifi_connect_init("YOUR_SSID", "YOUR_PASSWORD");

    esp_mqtt_client_config_t mqtt_cfg = {
        .uri = MQTT_URI,
        .event_handle = mqtt_event_handler,
    };
    mqtt_client = esp_mqtt_client_init(&mqtt_cfg);
    esp_mqtt_client_start(mqtt_client);

    relay_init(HEATER_PIN);
    relay_init(COOLER_PIN);

    xTaskCreate(temp_control_task, "temp_ctrl", 4096, NULL, 5, NULL);
    ESP_LOGI(TAG, "System initialized");
}
