#include "lcd_i2c.h"
#include "driver/i2c.h"
#include "esp_log.h"

#define I2C_MASTER_FREQ_HZ 100000
#define LCD_ENABLE_BIT 0x04
#define LCD_BACKLIGHT 0x08

typedef struct {
    i2c_port_t i2c_port;
    uint8_t address;
    uint8_t columns;
    uint8_t rows;
    uint8_t backlight;
} lcd_dev_t;

lcd_handle_t lcd_i2c_init(i2c_port_t port, uint8_t addr, uint8_t cols, uint8_t rows) {
    lcd_dev_t *dev = malloc(sizeof(lcd_dev_t));
    dev->i2c_port = port;
    dev->address = addr;
    dev->columns = cols;
    dev->rows = rows;
    dev->backlight = LCD_BACKLIGHT;
    
    // Инициализация I2C
    i2c_config_t conf = {
        .mode = I2C_MODE_MASTER,
        .sda_io_num = GPIO_NUM_21,
        .scl_io_num = GPIO_NUM_22,
        .sda_pullup_en = GPIO_PULLUP_ENABLE,
        .scl_pullup_en = GPIO_PULLUP_ENABLE,
        .master.clk_speed = I2C_MASTER_FREQ_HZ,
    };
    i2c_param_config(port, &conf);
    i2c_driver_install(port, conf.mode, 0, 0, 0);
    
    // Инициализация LCD
    vTaskDelay(pdMS_TO_TICKS(50));
    lcd_send_cmd(dev, 0x33);
    lcd_send_cmd(dev, 0x32);
    lcd_send_cmd(dev, 0x28);
    lcd_send_cmd(dev, 0x0C);
    lcd_send_cmd(dev, 0x06);
    lcd_send_cmd(dev, 0x01);
    vTaskDelay(pdMS_TO_TICKS(10));
    
    return (lcd_handle_t)dev;
}

static void lcd_send_nibble(lcd_dev_t *dev, uint8_t data, uint8_t mode) {
    uint8_t high = data & 0xF0;
    uint8_t low = (data << 4) & 0xF0;
    
    uint8_t buf[4];
    buf[0] = high | mode | dev->backlight | LCD_ENABLE_BIT;
    buf[1] = high | mode | dev->backlight;
    buf[2] = low | mode | dev->backlight | LCD_ENABLE_BIT;
    buf[3] = low | mode | dev->backlight;
    
    i2c_master_write_to_device(dev->i2c_port, dev->address, buf, 4, pdMS_TO_TICKS(1000));
}

void lcd_send_cmd(lcd_handle_t handle, uint8_t cmd) {
    lcd_dev_t *dev = (lcd_dev_t *)handle;
    lcd_send_nibble(dev, cmd, 0x00);
}

void lcd_write_str(lcd_handle_t handle, const char *str, uint8_t row, uint8_t col) {
    lcd_dev_t *dev = (lcd_dev_t *)handle;
    
    uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
    if (row > dev->rows) row = dev->rows - 1;
    
    lcd_send_cmd(handle, 0x80 | (col + row_offsets[row]));
    
    while (*str) {
        lcd_send_nibble(dev, *str++, 0x01);
        vTaskDelay(pdMS_TO_TICKS(1));
    }
}
