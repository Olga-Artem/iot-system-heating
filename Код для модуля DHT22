#include <stdio.h>
#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/queue.h"
#include "esp_log.h"
#include "nvs_flash.h"
#include "esp_wifi.h"
#include "driver/i2c.h"
#include "driver/gpio.h"
#include "esp_timer.h"
#include "esp_event.h"
#include "mqtt_client.h"

#define TAG "TEMP_CONTROLLER"

// Конфигурация железа
#define DHT_GPIO GPIO_NUM_4
#define I2C_PORT I2C_NUM_0
#define I2C_SDA_GPIO 21
#define I2C_SCL_GPIO 22
#define OLED_ADDR 0x3C

// MQTT конфигурация
#define MQTT_BROKER "mqtt://iot.eclipse.org"
#define MQTT_TOPIC_TEMP "home/sensors/temperature"
#define MQTT_TOPIC_HUMID "home/sensors/humidity"
#define MQTT_TOPIC_SETPOINT "home/control/setpoint"

// Глобальные переменные
float current_temp = 0.0;
float current_humidity = 0.0;
float desired_temp = 22.0;
esp_mqtt_client_handle_t mqtt_client;

// Прототипы функций для OLED
void oled_init();
void oled_clear();
void oled_update();
void oled_write_string(int row, int col, const char *text);

// Инициализация I2C
void i2c_init() {
    i2c_config_t conf = {
        .mode = I2C_MODE_MASTER,
        .sda_io_num = I2C_SDA_GPIO,
        .scl_io_num = I2C_SCL_GPIO,
        .sda_pullup_en = GPIO_PULLUP_ENABLE,
        .scl_pullup_en = GPIO_PULLUP_ENABLE,
        .master.clk_speed = 400000
    };
    ESP_ERROR_CHECK(i2c_param_config(I2C_PORT, &conf));
    ESP_ERROR_CHECK(i2c_driver_install(I2C_PORT, conf.mode, 0, 0, 0));
}

// Обновление OLED дисплея
void update_display() {
    oled_clear();
    
    char line1[20];
    snprintf(line1, sizeof(line1), "Temp: %.1fC", current_temp);
    oled_write_string(0, 0, line1);
    
    char line2[20];
    snprintf(line2, sizeof(line2), "Humid: %.1f%%", current_humidity);
    oled_write_string(2, 0, line2);
    
    char line3[20];
    snprintf(line3, sizeof(line3), "Set: %.1fC", desired_temp);
    oled_write_string(4, 0, line3);
    
    oled_update();
}

// Чтение данных с DHT22
esp_err_t dht22_read(float *temperature, float *humidity) {
    uint8_t data[5] = {0};
    
    // Отправка стартового сигнала
    gpio_set_direction(DHT_GPIO, GPIO_MODE_OUTPUT);
    gpio_set_level(DHT_GPIO, 0);
    ets_delay_us(18000);  // 18ms
    gpio_set_level(DHT_GPIO, 1);
    ets_delay_us(40);
    
    // Переход в режим чтения
    gpio_set_direction(DHT_GPIO, GPIO_MODE_INPUT);
    
    // Ожидание ответа
    uint32_t start = esp_timer_get_time();
    while (gpio_get_level(DHT_GPIO) == 1) {
        if (esp_timer_get_time() - start > 100) return ESP_ERR_TIMEOUT;
    }
    
    start = esp_timer_get_time();
    while (gpio_get_level(DHT_GPIO) == 0) {
        if (esp_timer_get_time() - start > 100) return ESP_ERR_TIMEOUT;
    }
    
    start = esp_timer_get_time();
    while (gpio_get_level(DHT_GPIO) == 1) {
        if (esp_timer_get_time() - start > 100) return ESP_ERR_TIMEOUT;
    }
    
    // Чтение 40 бит данных
    for (int i = 0; i < 40; i++) {
        start = esp_timer_get_time();
        while (gpio_get_level(DHT_GPIO) == 0) {
            if (esp_timer_get_time() - start > 100) return ESP_ERR_TIMEOUT;
        }
        
        uint32_t duration = 0;
        start = esp_timer_get_time();
        while (gpio_get_level(DHT_GPIO) == 1) {
            duration = esp_timer_get_time() - start;
            if (duration > 100) break;
        }
        
        data[i/8] <<= 1;
        if (duration > 40) {
            data[i/8] |= 1;
        }
    }
    
    // Проверка контрольной суммы
    if (data[4] != ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
        return ESP_ERR_INVALID_CRC;
    }
    
    *humidity = (data[0] << 8 | data[1]) * 0.1;
    *temperature = ((data[2] & 0x7F) << 8 | data[3]) * 0.1;
    if (data[2] & 0x80) *temperature *= -1;
    
    return ESP_OK;
}

// Задача чтения сенсора
void sensor_task(void* arg) {
    while(1) {
        float temp, humid;
        esp_err_t ret = dht22_read(&temp, &humid);
        
        if (ret == ESP_OK) {
            current_temp = temp;
            current_humidity = humid;
            ESP_LOGI(TAG, "Temperature: %.1fC, Humidity: %.1f%%", temp, humid);
            
            // Отправка данных через MQTT
            char temp_str[10];
            snprintf(temp_str, sizeof(temp_str), "%.1f", temp);
            esp_mqtt_client_publish(mqtt_client, MQTT_TOPIC_TEMP, temp_str, 0, 1, 0);
            
            char humid_str[10];
            snprintf(humid_str, sizeof(humid_str), "%.1f", humid);
            esp_mqtt_client_publish(mqtt_client, MQTT_TOPIC_HUMID, humid_str, 0, 1, 0);
            
            update_display();
        } else {
            ESP_LOGE(TAG, "DHT22 read error: %d", ret);
        }
        
        vTaskDelay(pdMS_TO_TICKS(5000));
    }
}

// Обработчик событий MQTT
static void mqtt_event_handler(void *handler_args, esp_event_base_t base, 
                               int32_t event_id, void *event_data) {
    esp_mqtt_event_handle_t event = event_data;
    
    switch (event_id) {
        case MQTT_EVENT_CONNECTED:
            ESP_LOGI(TAG, "MQTT connected");
            esp_mqtt_client_subscribe(mqtt_client, MQTT_TOPIC_SETPOINT, 1);
            break;
            
        case MQTT_EVENT_DATA:
            ESP_LOGI(TAG, "MQTT data: %.*s", event->data_len, event->data);
            
            if (strncmp(event->topic, MQTT_TOPIC_SETPOINT, event->topic_len) == 0) {
                char buffer[10];
                strncpy(buffer, event->data, event->data_len);
                buffer[event->data_len] = '\0';
                desired_temp = atof(buffer);
                
                // Проверка допустимого диапазона
                if (desired_temp < 10) desired_temp = 10.0;
                if (desired_temp > 30) desired_temp = 30.0;
                
                ESP_LOGI(TAG, "New setpoint: %.1fC", desired_temp);
                update_display();
            }
            break;
            
        case MQTT_EVENT_DISCONNECTED:
            ESP_LOGI(TAG, "MQTT disconnected");
            break;
    }
}

// Инициализация Wi-Fi
void wifi_init_sta() {
    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    ESP_ERROR_CHECK(esp_wifi_init(&cfg));
    
    wifi_config_t wifi_config = {
        .sta = {
            .ssid = "YOUR_WIFI_SSID",
            .password = "YOUR_WIFI_PASS",
        },
    };
    
    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));
    ESP_ERROR_CHECK(esp_wifi_set_config(ESP_IF_WIFI_STA, &wifi_config));
    ESP_ERROR_CHECK(esp_wifi_start());
    ESP_ERROR_CHECK(esp_wifi_connect());
}

// Реализация OLED дисплея (SSD1306)
static uint8_t oled_buffer[512]; // 128x32/8 = 512 байт

void oled_send_cmd(uint8_t cmd) {
    uint8_t buf[2] = {0x00, cmd};
    i2c_master_write_to_device(I2C_PORT, OLED_ADDR, buf, sizeof(buf), pdMS_TO_TICKS(100));
}

void oled_send_data(const uint8_t *data, size_t len) {
    uint8_t *buf = malloc(len + 1);
    buf[0] = 0x40;
    memcpy(buf + 1, data, len);
    i2c_master_write_to_device(I2C_PORT, OLED_ADDR, buf, len + 1, pdMS_TO_TICKS(100));
    free(buf);
}

void oled_init() {
    // Инициализация дисплея
    oled_send_cmd(0xAE); // Display off
    oled_send_cmd(0xD5); // Set display clock
    oled_send_cmd(0x80);
    oled_send_cmd(0xA8); // Set multiplex
    oled_send_cmd(0x1F); // 31 for 32px height
    oled_send_cmd(0xD3); // Set display offset
    oled_send_cmd(0x00);
    oled_send_cmd(0x40); // Set start line
    oled_send_cmd(0x8D); // Charge pump
    oled_send_cmd(0x14);
    oled_send_cmd(0x20); // Memory mode
    oled_send_cmd(0x00);
    oled_send_cmd(0xA1); // Segment remap
    oled_send_cmd(0xC8); // COM output scan direction
    oled_send_cmd(0xDA); // Set COM pins
    oled_send_cmd(0x02);
    oled_send_cmd(0x81); // Set contrast
    oled_send_cmd(0x8F);
    oled_send_cmd(0xD9); // Set precharge
    oled_send_cmd(0xF1);
    oled_send_cmd(0xDB); // Set vcom detect
    oled_send_cmd(0x40);
    oled_send_cmd(0xA4); // Display all on resume
    oled_send_cmd(0xA6); // Normal display
    oled_send_cmd(0xAF); // Display on
    
    oled_clear();
}

void oled_clear() {
    memset(oled_buffer, 0, sizeof(oled_buffer));
}

void oled_update() {
    oled_send_cmd(0x21); // Column address
    oled_send_cmd(0x00);
    oled_send_cmd(0x7F);
    oled_send_cmd(0x22); // Page address
    oled_send_cmd(0x00);
    oled_send_cmd(0x03);
    
    oled_send_data(oled_buffer, sizeof(oled_buffer));
}

void oled_draw_char(int x, int y, char c) {
    // Базовая реализация символов (5x8)
    static const uint8_t font[][5] = {
        {0x3E, 0x51, 0x49, 0x45, 0x3E}, // 0
        {0x00, 0x42, 0x7F, 0x40, 0x00}, // 1
        {0x42, 0x61, 0x51, 0x49, 0x46}, // 2
        {0x21, 0x41, 0x45, 0x4B, 0x31}, // 3
        {0x18, 0x14, 0x12, 0x7F, 0x10}, // 4
        {0x27, 0x45, 0x45, 0x45, 0x39}, // 5
        {0x3C, 0x4A, 0x49, 0x49, 0x30}, // 6
        {0x01, 0x71, 0x09, 0x05, 0x03}, // 7
        {0x36, 0x49, 0x49, 0x49, 0x36}, // 8
        {0x06, 0x49, 0x49, 0x29, 0x1E}, // 9
        {0x00, 0x00, 0x00, 0x00, 0x00}, // space
        {0x00, 0x36, 0x36, 0x00, 0x00}, // :
        {0x00, 0x60, 0x60, 0x00, 0x00}, // .
        {0x3E, 0x41, 0x41, 0x41, 0x22}, // C
        {0x7F, 0x09, 0x19, 0x29, 0x46}, // %
        {0x7F, 0x49, 0x49, 0x49, 0x36}, // H
        {0x3E, 0x41, 0x41, 0x41, 0x3E}, // °
        {0x7C, 0x12, 0x11, 0x12, 0x7C}, // A
        {0x7F, 0x49, 0x49, 0x49, 0x41}  // E
    };
    
    int index = -1;
    if (c >= '0' && c <= '9') index = c - '0';
    else if (c == ' ') index = 10;
    else if (c == ':') index = 11;
    else if (c == '.') index = 12;
    else if (c == 'C') index = 13;
    else if (c == '%') index = 14;
    else if (c == 'H') index = 15;
    else if (c == '°') index = 16;
    else if (c == 'A') index = 17;
    else if (c == 'E') index = 18;
    
    if (index < 0) return;
    
    for (int col = 0; col < 5; col++) {
        uint8_t col_data = font[index][col];
        for (int bit = 0; bit < 8; bit++) {
            if (col_data & (1 << bit)) {
                int pos = (y + bit) * 16 + x + col;
                if (pos < sizeof(oled_buffer)) {
                    oled_buffer[pos] = 1;
                }
            }
        }
    }
}

void oled_write_string(int row, int col, const char *text) {
    int x = col * 6;
    int y = row * 8;
    for (int i = 0; text[i] != '\0'; i++) {
        oled_draw_char(x, y, text[i]);
        x += 6;
        if (x > 122) break;
    }
}

void app_main() {
    // Инициализация NVS
    ESP_ERROR_CHECK(nvs_flash_init());
    
    // Инициализация I2C
    i2c_init();
    
    // Инициализация OLED
    oled_init();
    oled_clear();
    oled_update();
    
    // Инициализация GPIO для DHT22
    gpio_set_direction(DHT_GPIO, GPIO_MODE_INPUT);
    gpio_set_pull_mode(DHT_GPIO, GPIO_PULLUP_ONLY);
    
    // Инициализация Wi-Fi
    ESP_ERROR_CHECK(esp_netif_init());
    ESP_ERROR_CHECK(esp_event_loop_create_default());
    wifi_init_sta();
    
    // Инициализация MQTT
    esp_mqtt_client_config_t mqtt_cfg = {
        .uri = MQTT_BROKER,
        .event_handle = mqtt_event_handler,
    };
    mqtt_client = esp_mqtt_client_init(&mqtt_cfg);
    esp_mqtt_client_start(mqtt_client);
    
    // Создание задачи для сенсора
    xTaskCreate(sensor_task, "sensor_task", 4096, NULL, 5, NULL);
    
    ESP_LOGI(TAG, "System initialized");
}
