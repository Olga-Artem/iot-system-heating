#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_log.h"
#include "nvs_flash.h"
#include "esp_now.h"
#include "esp_wifi.h"
#include "driver/ledc.h"
#include "esp_event.h"
#include "esp_netif.h"

#define TAG "SLAVE_NODE"

// Конфигурация сервопривода
#define SERVO_GPIO GPIO_NUM_4
#define LEDC_CHANNEL LEDC_CHANNEL_0
#define LEDC_TIMER LEDC_TIMER_0
#define LEDC_MODE LEDC_LOW_SPEED_MODE
#define LEDC_DUTY_RES LEDC_TIMER_13_BIT
#define LEDC_FREQ 50 // 50 Hz для сервопривода

// Структура данных (должна совпадать с Master)
typedef struct {
    float desired_temp;
} esp_now_data_t;

// Инициализация сервопривода
void servo_init() {
    ledc_timer_config_t timer_cfg = {
        .speed_mode = LEDC_MODE,
        .duty_resolution = LEDC_DUTY_RES,
        .timer_num = LEDC_TIMER,
        .freq_hz = LEDC_FREQ,
        .clk_cfg = LEDC_AUTO_CLK
    };
    ESP_ERROR_CHECK(ledc_timer_config(&timer_cfg));

    ledc_channel_config_t ch_cfg = {
        .gpio_num = SERVO_GPIO,
        .speed_mode = LEDC_MODE,
        .channel = LEDC_CHANNEL,
        .intr_type = LEDC_INTR_DISABLE,
        .timer_sel = LEDC_TIMER,
        .duty = 0,
        .hpoint = 0
    };
    ESP_ERROR_CHECK(ledc_channel_config(&ch_cfg));
}

// Установка угла сервопривода (0-180°)
void set_servo_angle(float angle) {
    if(angle < 0) angle = 0;
    if(angle > 180) angle = 180;
    
    // Точный расчет duty cycle
    const float min_pulse = 0.5f;   // 0.5 ms (0°)
    const float max_pulse = 2.5f;   // 2.5 ms (180°)
    const float period = 20.0f;     // 20 ms период (50Hz)
    
    float pulse_width = min_pulse + (max_pulse - min_pulse) * (angle / 180.0f);
    uint32_t duty = (pulse_width / period) * (1 << LEDC_DUTY_RES);
    
    ESP_ERROR_CHECK(ledc_set_duty(LEDC_MODE, LEDC_CHANNEL, duty));
    ESP_ERROR_CHECK(ledc_update_duty(LEDC_MODE, LEDC_CHANNEL));
    ESP_LOGI(TAG, "Servo set to %.1f°", angle);
}

// Преобразование температуры в угол
float temp_to_angle(float temp) {
    const float min_temp = 15.0f;
    const float max_temp = 30.0f;
    
    if(temp < min_temp) return 0;
    if(temp > max_temp) return 180;
    
    return ((temp - min_temp) / (max_temp - min_temp)) * 180.0f;
}

// Callback приема ESP-NOW (обновленный API)
void esp_now_recv_cb(const esp_now_recv_info_t *info, const uint8_t *data, int len) {
    if(len != sizeof(esp_now_data_t)) {
        ESP_LOGE(TAG, "Invalid data length: %d (expected %d)", len, sizeof(esp_now_data_t));
        return;
    }
    
    const esp_now_data_t* received = (const esp_now_data_t*)data;
    float angle = temp_to_angle(received->desired_temp);
    
    set_servo_angle(angle);
    ESP_LOGI(TAG, "Received temp: %.1f°C → Set angle: %.1f°", received->desired_temp, angle);
}

// Инициализация Wi-Fi и ESP-NOW
void wifi_espnow_init() {
    // Инициализация сетевого стека
    ESP_ERROR_CHECK(esp_netif_init());
    ESP_ERROR_CHECK(esp_event_loop_create_default());
    
    // Конфигурация Wi-Fi
    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    ESP_ERROR_CHECK(esp_wifi_init(&cfg));
    ESP_ERROR_CHECK(esp_wifi_set_storage(WIFI_STORAGE_RAM));
    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));
    ESP_ERROR_CHECK(esp_wifi_start());
    
    // Установка канала (должен совпадать с Master)
    ESP_ERROR_CHECK(esp_wifi_set_channel(1, WIFI_SECOND_CHAN_NONE));
    
    // Инициализация ESP-NOW
    ESP_ERROR_CHECK(esp_now_init());
    ESP_ERROR_CHECK(esp_now_register_recv_cb(esp_now_recv_cb));
}

void app_main() {
    // Инициализация NVS
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        ESP_ERROR_CHECK(nvs_flash_erase());
        ret = nvs_flash_init();
    }
    ESP_ERROR_CHECK(ret);
    
    // Инициализация Wi-Fi и ESP-NOW
    wifi_espnow_init();
    
    // Инициализация сервопривода
    servo_init();
    set_servo_angle(90.0f); // Начальное положение
    
    ESP_LOGI(TAG, "Slave node initialized. Waiting for commands...");

    // Основной цикл (не требует активных действий)
    while(1) {
        vTaskDelay(pdMS_TO_TICKS(1000));
    }
}
